name: Deploy Angular App to GKE

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  GAR_LOCATION: europe-west1
  GKE_CLUSTER: purvesh-angular-cluster
  GKE_REGION: europe-west1
  GCLOUD_PROJECT: asl-pocs
  REPOSITORY: purvesh-angular-frontend
  IMAGE: purvesh-gallery-ng

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: self-hosted
    steps:
      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      # Docker login to Artifact Registry
      - name: Docker login to Artifact Registry
        run: |
          echo '${{ secrets.GCP_CREDENTIALS }}' > gcp-credentials.json
          gcloud auth activate-service-account --key-file=gcp-credentials.json
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev

      # Checkout Source Code
      - name: Checkout Source Code
        uses: actions/checkout@v3

      # Build the Docker Image
      - name: Build Docker Image
        run: |
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # Push Docker Image to Artifact Registry
      - name: Push Docker Image
        run: |
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

      # Cleanup Docker Image
      - name: Cleanup Docker Image from Workspace
        run: |
          docker rmi "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

  deploy:
    name: Deploy to GKE
    runs-on: self-hosted
    needs: build
    steps:
      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      # Configure kubectl
      - name: Configure kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      # Authenticate with GKE Cluster
      - name: Authenticate with GKE Cluster
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_REGION }}

      # Deploy to GKE
      - name: Deploy Application
        run: |
          sed -i "s|LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG|$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA|g" k8s/deploy.yaml
          kubectl apply -f k8s/deploy.yaml
          kubectl rollout status deploy/angular-gallery --namespace=default

      # Retrieve Public IP
      - name: Retrieve Public IP
        id: get-public-ip
        run: |
          export SERVICE_IP=$(kubectl get svc external-lb -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "SERVICE_IP=$SERVICE_IP" >> $GITHUB_ENV

      # Display Public IP
      - name: Display Public IP
        run: echo "The public IP address of the service is ${{ env.SERVICE_IP }}"
