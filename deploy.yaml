apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: angular-gallery
  namespace: default # Update if using a custom namespace
  labels:
    app: angular-gallery
spec:
  replicas: 1 # Adjust based on your scaling requirements
  selector:
    app: angular-gallery
  template:
    metadata:
      labels:
        app: angular-gallery
    spec:
      containers:
        - name: angular-gallery
          image: LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG # Placeholder Replaced with GitHub Actions
          ports:
            - containerPort: 80
          resources:
            requests:
              memory: "256Mi"  # Minimum memory requested
              cpu: "250m"       # Minimum CPU requested 0.25vCPU
            limits:
              memory: "512Mi"   # Maximum memory allowed
              cpu: "500m"       # Maximum CPU allowed 0.5vCPU
          readinessProbe:
            httpGet:
              path: / 
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 20

---
apiVersion: v1
kind: Service
metadata:
  name: angular-gallery-service
  annotations:
    cloud.google.com/neg: '{"exposed_ports":{"80":{"name":"angular-gallery-neg"}}}' # Optional for better GKE integration
spec:
  selector:
    app: angular-gallery # Match the labels of the pod you want to expose
  ports:
    - protocol: TCP
      port: 80         # Port exposed internally
      targetPort: 80   # Port of the application running on the pod
  type: ClusterIP # Default type for internal service in OpenShift

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: angular-gallery-route
  annotations:
    haproxy.router.openshift.io/rewrite-target: /
spec:
  host: angular-gallery.<cluster_domain>  # Replace <cluster_domain> with your cluster's domain
  to:
    kind: Service
    name: angular-gallery-service
  port:
    targetPort: 80
  tls:
    termination: edge  # Optional, if you're using TLS
